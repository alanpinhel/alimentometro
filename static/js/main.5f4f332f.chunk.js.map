{"version":3,"sources":["actions/types.js","reducers/index.js","serviceWorker.js","containers/FoodsList.jsx","actions/index.js","components/SliderWeight.jsx","containers/FoodsForm.jsx","App.jsx","index.jsx"],"names":["LIST_FOODS","SELECT_FOOD","initialState","list","aw","getAlimentos","item","combineReducers","foods","state","arguments","length","undefined","action","type","Object","objectSpread","find","f","id","payload","Boolean","window","location","hostname","match","Header","styled","header","_templateObject","BackLink","Link","_templateObject2","Title","h1","_templateObject3","Main","main","_templateObject4","List","ul","_templateObject5","Item","li","_templateObject6","FoodButton","_templateObject7","FoodsList","handleList","this","props","react_default","a","createElement","Fragment","to","io","size","map","key","concat","nome","React","PureComponent","connect","dispatch","SliderWeight","_ref","handleFormat","handleChange","rc_slider_es","onChange","min","max","step","handle","_ref2","value","index","dragging","restProps","objectWithoutProperties","rc_tooltip_es","prefixCls","overlay","visible","placement","overlayStyle","touchAction","Handle","assign","FoodsForm_templateObject","FoodsForm_templateObject2","FoodsForm_templateObject3","Description","p","FoodsForm_templateObject4","FoodsForm_templateObject5","FoodsForm","output","_this$props","handleSelect","params","_this2","FoodsForm_Header","FoodsForm_BackLink","FoodsForm_Title","FoodsForm_Main","components_SliderWeight","formata","setState","pesoBruto","selectFood","Home","GlobalStyle","createGlobalStyle","App_templateObject","App","HashRouter","Route","path","exact","component","store","createStore","rootReducer","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f4f332f.chunk.js","sourcesContent":["export const LIST_FOODS = 'LIST_FOODS';\nexport const SELECT_FOOD = 'SELECT_FOOD';\n","import { combineReducers } from 'redux';\nimport aw from 'alimentometro-wrapper';\nimport { LIST_FOODS, SELECT_FOOD } from '../actions/types';\n\nconst initialState = {\n  list: aw.getAlimentos(),\n  item: {},\n};\n\nfunction foods(state = initialState, action) {\n  switch (action.type) {\n    case LIST_FOODS:\n      return { ...state, list: aw.getAlimentos() };\n    case SELECT_FOOD:\n      return { ...state, item: state.list.find(f => f.id === +action.payload.id) };\n    default:\n      return state;\n  }\n}\n\nexport default combineReducers({\n  foods,\n});\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { IoIosArrowBack } from 'react-icons/io';\nimport { Link } from 'react-router-dom';\nimport { listFoods } from '../actions';\n\nconst Header = styled.header`\n  position: sticky;\n  top: 0;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-bottom: solid 1px #e0e0e0;\n  box-sizing: border-box;\n  z-index: 1;\n`;\n\nconst BackLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  color: #007aff;\n  text-decoration: none;\n  line-height: 1;\n`;\n\nconst Title = styled.h1`\n  font-size: 1.2rem;\n  text-align: center;\n  margin: 0rem;\n`;\n\nconst Main = styled.main`\n  width: 100%;\n`;\n\nconst List = styled.ul`\n  margin: 0;\n  padding-left: 0.5rem;\n  list-style: none;\n`;\n\nconst Item = styled.li`\n  &:not(:last-child) a {\n    border-bottom: 1px solid #e0e0e0;\n  }\n`;\n\nconst FoodButton = styled(Link)`\n  display: block;\n  color: #000;\n  line-height: 1;\n  text-decoration: none;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n`;\n\nclass FoodsList extends React.PureComponent {\n  componentDidMount() {\n    const { handleList } = this.props;\n    handleList();\n  }\n\n  render() {\n    const { list } = this.props;\n    return (\n      <>\n        <Header>\n          <BackLink to=\"/\">\n            <IoIosArrowBack size=\"1.5rem\" />\n            Tela Inicial\n          </BackLink>\n          <Title>Alimentos</Title>\n        </Header>\n\n        <Main>\n          <List>\n            {list.map(f => (\n              <Item key={f.id}>\n                <FoodButton to={`/foods/${f.id}`}>{f.nome}</FoodButton>\n              </Item>\n            ))}\n          </List>\n        </Main>\n      </>\n    );\n  }\n}\n\nFoodsList.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      nome: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  handleList: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => {\n  return {\n    list: state.foods.list,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleList: () => dispatch(listFoods()),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FoodsList);\n","import { LIST_FOODS, SELECT_FOOD } from './types';\n\nexport const listFoods = () => ({\n  type: LIST_FOODS,\n});\n\nexport const selectFood = id => ({\n  type: SELECT_FOOD,\n  payload: { id },\n});\n","import 'rc-slider/assets/index.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Slider from 'rc-slider';\nimport Tooltip from 'rc-tooltip';\n\nfunction SliderWeight({ handleFormat, handleChange }) {\n  const handle = ({ value, dragging, index, ...restProps }) => (\n    <Tooltip\n      prefixCls=\"rc-slider-tooltip\"\n      overlay={handleFormat(value)}\n      visible\n      placement=\"bottomRight\"\n      key={index}\n      overlayStyle={{ touchAction: 'none' }}\n    >\n      <Slider.Handle value={value} {...restProps} />\n    </Tooltip>\n  );\n\n  handle.propTypes = {\n    value: PropTypes.string.isRequired,\n    dragging: PropTypes.func.isRequired,\n    index: PropTypes.number.isRequired,\n  };\n\n  return <Slider onChange={handleChange} min={100} max={10000} step={100} handle={handle} />;\n}\n\nSliderWeight.propTypes = {\n  handleFormat: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n\nexport default SliderWeight;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { IoIosArrowBack } from 'react-icons/io';\nimport { Link } from 'react-router-dom';\nimport aw from 'alimentometro-wrapper';\nimport SliderWeight from '../components/SliderWeight';\nimport { selectFood } from '../actions';\n\nconst Header = styled.header`\n  position: sticky;\n  top: 0;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-bottom: solid 1px #e0e0e0;\n  box-sizing: border-box;\n  z-index: 1;\n`;\n\nconst BackLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  color: #007aff;\n  text-decoration: none;\n  line-height: 1;\n`;\n\nconst Title = styled.h1`\n  font-size: 1.2rem;\n  text-align: center;\n  margin: 0rem;\n`;\n\nconst Description = styled.p`\n  text-align: center;\n  margin-top: 0.5rem;\n  margin-bottom: 0;\n  line-height: 1;\n`;\n\nconst Main = styled.main`\n  padding: 2.5rem;\n  box-sizing: border-box;\n`;\n\nclass FoodsForm extends React.PureComponent {\n  state = {\n    output: '',\n  };\n\n  componentDidMount() {\n    const { handleSelect, match } = this.props;\n    handleSelect(match.params.id);\n  }\n\n  render() {\n    const { item } = this.props;\n    return (\n      <>\n        <Header>\n          <BackLink to=\"/foods\">\n            <IoIosArrowBack size=\"1.5rem\" />\n            Alimentos\n          </BackLink>\n          <Title>{item.nome}</Title>\n          <Description>Quanto você precisa consumir?</Description>\n        </Header>\n\n        <Main>\n          <SliderWeight\n            handleFormat={value => aw.formata(value)}\n            handleChange={value =>\n              this.setState({\n                output: aw.formata(item.pesoBruto * value),\n              })\n            }\n          />\n          <br />\n          <br />\n          {this.state.output}\n        </Main>\n      </>\n    );\n  }\n}\n\nFoodsForm.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.number,\n    nome: PropTypes.string,\n  }).isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.node,\n    }).isRequired,\n  }).isRequired,\n  handleSelect: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => {\n  return {\n    item: state.foods.item,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSelect: id => dispatch(selectFood(id)),\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FoodsForm);\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { HashRouter, Link, Route } from 'react-router-dom';\nimport FoodsList from './containers/FoodsList';\nimport FoodsForm from './containers/FoodsForm';\n\nconst Home = () => <Link to=\"/foods\">Alimentos</Link>;\n\nfunction App() {\n  return (\n    <HashRouter>\n      <>\n        sasa\n        <GlobalStyle />\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/foods\" exact component={FoodsList} />\n        <Route path=\"/foods/:id\" component={FoodsForm} />\n      </>\n    </HashRouter>\n  );\n}\n\nconst GlobalStyle = createGlobalStyle`\n  html, body, #root {\n    margin: 0;\n    width: 100%;\n  }\n\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu,\n    Cantarell, \"Helvetica Neue\", sans-serif;\n  }\n`;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}