{"version":3,"sources":["App.jsx","serviceWorker.js","index.jsx"],"names":["App","state","foods","addedFoods","handleSubmit","e","preventDefault","_this","_e$target","target","food","value","amount","foodSelected","find","f","id","setState","beforeState","Object","objectSpread","defineProperty","name","nome","aw","formata","pesoBruto","this","getAlimentos","_this$state","react_default","a","createElement","Fragment","GlobalStyle","Header","Title","Description","Main","Form","onSubmit","keys","map","k","key","Label","htmlFor","type","style","width","textAlign","React","Component","createGlobalStyle","_templateObject","styled","header","_templateObject2","h1","_templateObject3","p","_templateObject4","main","_templateObject5","form","_templateObject6","label","_templateObject7","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"02CAIMA,6MACJC,MAAQ,CACNC,MAAO,GACPC,WAAY,MAOdC,aAAe,SAAAC,GACbA,EAAEC,iBADgB,IAGVJ,EAAUK,EAAKN,MAAfC,MAHUM,EAOdH,EAAEI,OAFWC,EALCF,EAKhBE,KAAQC,MACSC,EANDJ,EAMhBI,OAAUD,MAGNE,EAAeX,EAAMY,KAAK,SAAAC,GAAC,OAAIA,EAAEC,MAAQN,IAE/CH,EAAKU,SAAS,SAAAC,GACZ,MAAO,CACLf,WAAWgB,OAAAC,EAAA,EAAAD,CAAA,GACND,EAAYf,WADPgB,OAAAE,EAAA,EAAAF,CAAA,GAEPT,EAAO,CACNY,KAAMT,EAAaU,KACnBX,OAAQY,IAAGC,QAAQZ,EAAaa,UAAYd,6FApBpDe,KAAKV,SAAS,CAAEf,MAAOsB,IAAGI,kDA2BnB,IAAAC,EACuBF,KAAK1B,MAA3BC,EADD2B,EACC3B,MAAOC,EADR0B,EACQ1B,WACf,OACE2B,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACE,EAAD,MAEAJ,EAAAC,EAAAC,cAACG,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAD,yBACAN,EAAAC,EAAAC,cAACK,EAAD,+HAMFP,EAAAC,EAAAC,cAACM,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAD,CAAMC,SAAUb,KAAKvB,cACnB0B,EAAAC,EAAAC,cAAA,UAAQhB,GAAG,OAAOM,KAAK,QACpBH,OAAOsB,KAAKvC,GAAOwC,IAAI,SAAAC,GAAC,OACvBb,EAAAC,EAAAC,cAAA,UAAQY,IAAK1C,EAAMyC,GAAG3B,GAAIL,MAAOT,EAAMyC,GAAG3B,IACvCd,EAAMyC,GAAGpB,SAKhBO,EAAAC,EAAAC,cAACa,EAAD,CAAOC,QAAQ,UAAf,aAEEhB,EAAAC,EAAAC,cAAA,SAAOhB,GAAG,SAASM,KAAK,SAASyB,KAAK,YAGxCjB,EAAAC,EAAAC,cAAA,UAAQe,KAAK,UAAb,uBAGFjB,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,sBAIJF,EAAAC,EAAAC,cAAA,aACGb,OAAOsB,KAAKtC,GAAYuC,IAAI,SAAAC,GAAC,OAC5Bb,EAAAC,EAAAC,cAAA,MAAIY,IAAKD,GACPb,EAAAC,EAAAC,cAAA,MAAIgB,MAAO,CAAEC,MAAO,SAAW9C,EAAWwC,GAAGrB,MAC7CQ,EAAAC,EAAAC,cAAA,MAAIgB,MAAO,CAAEE,UAAW,UAAY/C,EAAWwC,GAAG/B,sBA9ElDuC,IAAMC,WAyFlBlB,EAAcmB,YAAHC,KAYXnB,EAASoB,IAAOC,OAAVC,KAMNrB,EAAQmB,IAAOG,GAAVC,KAILtB,EAAckB,IAAOK,EAAVC,KAKXvB,EAAOiB,IAAOO,KAAVC,KAKJxB,EAAOgB,IAAOS,KAAVC,KASJpB,EAAQU,IAAOW,MAAVC,KAOInE,IChIKoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCbnCC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d83a07ec.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport aw from 'alimentometro-wrapper';\n\nclass App extends React.Component {\n  state = {\n    foods: {},\n    addedFoods: [],\n  };\n\n  componentDidMount() {\n    this.setState({ foods: aw.getAlimentos() });\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const { foods } = this.state;\n    const {\n      food: { value: food },\n      amount: { value: amount },\n    } = e.target;\n\n    const foodSelected = foods.find(f => f.id === +food);\n\n    this.setState(beforeState => {\n      return {\n        addedFoods: {\n          ...beforeState.addedFoods,\n          [food]: {\n            name: foodSelected.nome,\n            amount: aw.formata(foodSelected.pesoBruto * amount),\n          },\n        },\n      };\n    });\n  };\n\n  render() {\n    const { foods, addedFoods } = this.state;\n    return (\n      <React.Fragment>\n        <GlobalStyle />\n\n        <Header>\n          <Title>Alimentômetro</Title>\n          <Description>\n            Adicione o alimento e o peso em gramas da quantidade que você precisa consumir, para\n            saber quanto precisa comprar.\n          </Description>\n        </Header>\n\n        <Main>\n          <Form onSubmit={this.handleSubmit}>\n            <select id=\"food\" name=\"food\">\n              {Object.keys(foods).map(k => (\n                <option key={foods[k].id} value={foods[k].id}>\n                  {foods[k].nome}\n                </option>\n              ))}\n            </select>\n\n            <Label htmlFor=\"amount\">\n              Quantidade\n              <input id=\"amount\" name=\"amount\" type=\"number\" />\n            </Label>\n\n            <button type=\"submit\">Adicionar Alimento</button>\n          </Form>\n\n          <table>\n            <thead>\n              <tr>\n                <td>Alimento</td>\n                <td>Quant.</td>\n              </tr>\n            </thead>\n\n            <tbody>\n              {Object.keys(addedFoods).map(k => (\n                <tr key={k}>\n                  <td style={{ width: '100%' }}>{addedFoods[k].name}</td>\n                  <td style={{ textAlign: 'right' }}>{addedFoods[k].amount}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </Main>\n      </React.Fragment>\n    );\n  }\n}\n\nconst GlobalStyle = createGlobalStyle`\n  html, body, #root {\n    margin: 0;\n    width: 100%;\n  }\n\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu,\n    Cantarell, \"Helvetica Neue\", sans-serif;\n  }\n`;\n\nconst Header = styled.header`\n  margin-bottom: 1rem;\n  padding-right: 0.5rem;\n  padding-left: 0.5rem;\n`;\n\nconst Title = styled.h1`\n  text-align: center;\n`;\n\nconst Description = styled.p`\n  text-indent: 1ch;\n  line-height: 1.2;\n`;\n\nconst Main = styled.main`\n  padding-right: 0.5rem;\n  padding-left: 0.5rem;\n`;\n\nconst Form = styled.form`\n  position: sticky;\n  top: 0;\n  display: flex;\n  flex-direction: column;\n  background-color: #fff;\n  margin-bottom: 1rem;\n`;\n\nconst Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n`;\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}