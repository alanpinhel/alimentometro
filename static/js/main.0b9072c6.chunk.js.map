{"version":3,"sources":["utils/constants.js","components/Header.jsx","components/Main.jsx","components/FoodList.jsx","components/FoodForm.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["sizeIconAction","Container","styled","header","_templateObject","HeaderButton","a","_templateObject2","HeaderTitle","h1","_templateObject3","HeaderDescription","p","_templateObject4","Header","_ref","action","title","description","react_default","createElement","onClick","handleClick","io","size","label","defaultProps","main","Main_templateObject","ul","FoodList_templateObject","li","FoodList_templateObject2","FoodList_templateObject3","FoodList","Main","FoodForm_templateObject","Result","FoodForm_templateObject2","Footer","footer","FoodForm_templateObject3","Handle","Slider","handle","props","value","index","dragging","restProps","Object","objectWithoutProperties","rc_tooltip_es","prefixCls","overlay","aw","formata","visible","placement","key","assign","FoodForm","Fragment","components_Header","FoodForm_Main","es","min","max","defaultValue","step","GlobalStyle","createGlobalStyle","App_templateObject","App","undefined","components_FoodForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6KAKaA,EAAiB,guBCU9B,IAAMC,EAAYC,IAAOC,OAAVC,IDJa,QAHC,OARN,UACI,WC2BrBC,EAAeH,IAAOI,EAAVC,IDxBS,WCiCrBC,EAAcN,IAAOO,GAAVC,ID5BkB,SACF,UCiC3BC,EAAoBT,IAAOU,EAAVC,KAMvB,SAASC,EAATC,GAAgD,IAA9BC,EAA8BD,EAA9BC,OAAQC,EAAsBF,EAAtBE,MAAOC,EAAeH,EAAfG,YAC/B,OACEC,EAAAb,EAAAc,cAACnB,EAAD,KACEkB,EAAAb,EAAAc,cAACf,EAAD,CAAcgB,QAASL,EAAOM,aAC5BH,EAAAb,EAAAc,cAACG,EAAA,EAAD,CAAgBC,KAAMxB,IACrBgB,EAAOS,OAEVN,EAAAb,EAAAc,cAACZ,EAAD,KAAcS,GACdE,EAAAb,EAAAc,cAACT,EAAD,KAAoBO,IAK1BJ,EAAOY,aAAe,CACpBR,YAAa,IAYAJ,mICvEGZ,IAAOyB,KAAVC,IFOa,+dGJf1B,IAAO2B,GAAVC,KAMG5B,IAAO6B,GAAVC,IHZiB,WGkBd9B,IAAOI,EAAV2B,KAoCKC,svBC5Cf,IAAMC,EAAOjC,IAAOyB,KAAVS,IJAkB,iBIWtBC,EAASnC,IAAOU,EAAV0B,KAMNC,EAASrC,IAAOsC,OAAVC,KAeJC,EAAWC,IAAXD,OAEFE,EAAS,SAAAC,GAAS,IACdC,EAAyCD,EAAzCC,MAAiBC,GAAwBF,EAAlCG,SAAkCH,EAAxBE,OAAUE,EADbC,OAAAC,EAAA,EAAAD,CAC2BL,EAD3B,8BAEtB,OACE1B,EAAAb,EAAAc,cAACgC,EAAA,EAAD,CACEC,UAAU,oBACVC,QAASC,IAAGC,QAAQV,GACpBW,SAAO,EACPC,UAAU,MACVC,IAAKZ,GAEL5B,EAAAb,EAAAc,cAACsB,EAADQ,OAAAU,OAAA,CAAQd,MAAOA,GAAWG,MA6BjBY,MAxBf,WACE,OACE1C,EAAAb,EAAAc,cAAAD,EAAAb,EAAAwD,SAAA,KACE3C,EAAAb,EAAAc,cAAC2C,EAAD,CACE/C,OAAQ,CAAES,MAAO,YAAaH,YAAa,cAC3CL,MAAM,iBACNC,YAAY,qCAGdC,EAAAb,EAAAc,cAAC4C,EAAD,KACE7C,EAAAb,EAAAc,cAAC6C,EAAA,EAAD,CAAQC,IAAK,EAAGC,IAAK,IAAOC,aAAc,IAAKC,KAAM,IAAKzB,OAAQA,KAGpEzB,EAAAb,EAAAc,cAACmB,EAAD,KACEpB,EAAAb,EAAAc,cAACiB,EAAD,eAEElB,EAAAb,EAAAc,cAAA,oBAFF,0TC1DR,IAAMkD,EAAcC,YAAHC,KAYFC,EAtBf,WACE,OACEtD,EAAAb,EAAAc,cAAAD,EAAAb,EAAAwD,SAAA,KACE3C,EAAAb,EAAAc,cAACkD,EAAD,WACCI,EACAvD,EAAAb,EAAAc,cAACuD,EAAD,QCEaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCbnCC,IAASC,OAAO/D,EAAAb,EAAAc,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0b9072c6.chunk.js","sourcesContent":["export const bgColor = '#f8f8f8';\nexport const borderColor = '#e0e0e0';\n\n/* Action */\nexport const actionColor = '#007aff';\nexport const sizeIconAction = '1.5rem';\n\n/* Header */\nexport const paddingHeader = '1rem';\nexport const fontSizeTitleHeader = '1.2rem';\nexport const marginTitleHeader = '0.5rem';\nexport const heightHeader = '125px';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { IoIosArrowBack } from 'react-icons/io';\nimport {\n  paddingHeader,\n  bgColor,\n  borderColor,\n  heightHeader,\n  actionColor,\n  sizeIconAction,\n  fontSizeTitleHeader,\n  marginTitleHeader,\n} from '../utils/constants';\n\nconst Container = styled.header`\n  position: fixed;\n  top: 0;\n  height: ${heightHeader};\n  width: 100%;\n  padding: ${paddingHeader};\n  margin: 0 auto;\n  background-color: ${bgColor};\n  border-bottom: solid 1px ${borderColor};\n  box-sizing: border-box;\n  z-index: 1;\n`;\n\nconst HeaderButton = styled.a`\n  display: inline-flex;\n  align-items: center;\n  color: ${actionColor};\n  text-decoration: none;\n  line-height: 1;\n  cursor: pointer;\n`;\n\nconst HeaderTitle = styled.h1`\n  font-size: ${fontSizeTitleHeader};\n  text-align: center;\n  margin: ${marginTitleHeader};\n`;\n\nconst HeaderDescription = styled.p`\n  text-align: center;\n  margin: 0;\n  line-height: 1;\n`;\n\nfunction Header({ action, title, description }) {\n  return (\n    <Container>\n      <HeaderButton onClick={action.handleClick}>\n        <IoIosArrowBack size={sizeIconAction} />\n        {action.label}\n      </HeaderButton>\n      <HeaderTitle>{title}</HeaderTitle>\n      <HeaderDescription>{description}</HeaderDescription>\n    </Container>\n  );\n}\n\nHeader.defaultProps = {\n  description: '',\n};\n\nHeader.propTypes = {\n  action: PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    handleClick: PropTypes.func.isRequired,\n  }).isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n};\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { heightHeader } from '../utils/constants';\n\nconst Container = styled.main`\n  position: absolute;\n  top: ${heightHeader};\n  width: 100%;\n`;\n\nfunction Main({ children }) {\n  return <Container>{children}</Container>;\n}\n\nexport default Main;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Header from './Header';\nimport Main from './Main';\nimport { borderColor } from '../utils/constants';\n\nconst List = styled.ul`\n  margin: 0;\n  padding-left: 0.5rem;\n  list-style: none;\n`;\n\nconst Item = styled.li`\n  &:not(:last-child) a {\n    border-bottom: 1px solid ${borderColor};\n  }\n`;\n\nconst Link = styled.a`\n  display: block;\n  line-height: 1;\n  color: #000;\n  text-decoration: none;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n`;\n\nfunction FoodList({ foods }) {\n  return (\n    <>\n      <Header action={{ label: 'Tela Inicial', handleClick: () => {} }} title=\"Alimentos\" />\n\n      <Main>\n        <List>\n          {foods.map(f => (\n            <Item key={f.id}>\n              <Link href=\"#!\">{f.nome}</Link>\n            </Item>\n          ))}\n        </List>\n      </Main>\n    </>\n  );\n}\n\nFoodList.propTypes = {\n  foods: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      nome: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default FoodList;\n","import 'rc-slider/assets/index.css';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport Slider from 'rc-slider';\nimport Tooltip from 'rc-tooltip';\nimport aw from 'alimentometro-wrapper';\nimport Header from './Header';\nimport { heightHeader } from '../utils/constants';\n\nconst Main = styled.main`\n  position: absolute;\n  top: ${heightHeader};\n  height: calc(100vh - ${heightHeader} - 80px);\n  width: 100%;\n  display: flex;\n  align-items: center;\n  padding: 1rem;\n  box-sizing: border-box;\n`;\n\nconst Result = styled.p`\n  text-align: center;\n  margin: 0.5rem;\n  line-height: 1;\n`;\n\nconst Footer = styled.footer`\n  position: fixed;\n  bottom: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  height: 80px;\n  width: 100%;\n  padding: 0.5rem;\n  background-color: #f8f8f8;\n  border-top: solid 1px #e0e0e0;\n  box-sizing: border-box;\n  z-index: 1;\n`;\n\nconst { Handle } = Slider;\n\nconst handle = props => {\n  const { value, dragging, index, ...restProps } = props;\n  return (\n    <Tooltip\n      prefixCls=\"rc-slider-tooltip\"\n      overlay={aw.formata(value)}\n      visible\n      placement=\"top\"\n      key={index}\n    >\n      <Handle value={value} {...restProps} />\n    </Tooltip>\n  );\n};\n\nfunction FoodForm() {\n  return (\n    <>\n      <Header\n        action={{ label: 'Alimentos', handleClick: () => {} }}\n        title=\"Arroz Integral\"\n        description=\"Quanto vocÃª precisa consumir?\"\n      />\n\n      <Main>\n        <Slider min={0} max={10000} defaultValue={100} step={100} handle={handle} />\n      </Main>\n\n      <Footer>\n        <Result>\n          Prepare\n          <b> 1,5kg </b>\n          de Arroz Integral\n        </Result>\n      </Footer>\n    </>\n  );\n}\n\nexport default FoodForm;\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport aw from 'alimentometro-wrapper';\nimport FoodList from './components/FoodList';\nimport FoodForm from './components/FoodForm';\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      {undefined && <FoodList foods={aw.getAlimentos()} />}\n      {<FoodForm />}\n    </>\n  );\n}\n\nconst GlobalStyle = createGlobalStyle`\n  html, body, #root {\n    margin: 0;\n    width: 100%;\n  }\n\n  body {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu,\n    Cantarell, \"Helvetica Neue\", sans-serif;\n  }\n`;\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}